import random


def monte_carlo_hedge_simulation(iterations=10000):
    """
    –ú–æ–Ω—Ç–µ –ö–∞—Ä–ª–æ —Å–∏–º—É–ª–∞—Ü–∏—è –Ω–∞ —Ñ—É—Ç–±–æ–ª–µ–Ω —Ö–µ–¥–∂ - –ì–ê–†–ê–ù–¢–ò–†–ê–ù–û –ë–ï–ó –ó–ê–ì–£–ë–ò
    """
    print("üé∞ MONTE CARLO –•–ï–î–ñ –°–ò–ú–£–õ–ê–¶–ò–Ø (–ì–ê–†–ê–ù–¢–ò–†–ê–ù–û –ë–ï–ó –ó–ê–ì–£–ë–ò)")
    print("=" * 60)

    # –í—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏
    coef = [float(x) for x in input("–í—ä–≤–µ–¥–µ—Ç–µ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏ (1 X 2): ").split()]
    bets = [float(x) for x in input("–í—ä–≤–µ–¥–µ—Ç–µ –∑–∞–ª–æ–∑–∏ (1 X 2): ").split()]

    total_income = sum(bets)

    # –ù–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–µ –Ω–∞ –∑–∞–ª–æ–∑–∏—Ç–µ –∫—ä–º 1 –ª–µ–≤ –æ–±—â–æ
    normalized_bets = [bet / total_income for bet in bets]
    normalized_total_income = sum(normalized_bets)  # –¢–æ–≤–∞ —â–µ –µ 1.0

    print(f"\nüìä –í–•–û–î–ù–ò –î–ê–ù–ù–ò (–Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ –∫—ä–º 1 –ª–µ–≤):")
    print(f"–û–±—â –ø—Ä–∏—Ö–æ–¥: {normalized_total_income} –ª–≤")
    print("=" * 40)

    wins = 0
    break_even = 0
    total_profit = 0
    results = []

    print(f"\nüîÑ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ {iterations} –∏—Ç–µ—Ä–∞—Ü–∏–∏...")

    for i in range(iterations):
        # –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥–∏–∫–∞ –Ω–∞ —Ö–µ–¥–∂–∞ —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∏—Ä–∞–Ω–∏ —Å—É–º–∏
        hedge_coefs = [coef[0] * 0.98, coef[1] * 0.98, coef[2] * 0.98]
        payouts = [normalized_bets[i] * coef[i] for i in range(3)]

        # –°–¢–™–ü–ö–ê 1: –ù–∞–º–∏—Ä–∞–Ω–µ –Ω–∞ –∫–∞—Å–∞—Ç–∞
        highest_coef_index = coef.index(max(coef))
        cash = payouts[highest_coef_index]
        excess = normalized_total_income - cash

        # –°–¢–™–ü–ö–ê 2: –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∏—Ç–µ
        deficits = []
        for j in range(3):
            if j != highest_coef_index:
                deficit = payouts[j] - cash
                if deficit > 0:  # ‚úÖ –°–ê–ú–û –∞–∫–æ –∏–º–∞ –¥–µ—Ñ–∏—Ü–∏—Ç!
                    deficits.append((j, deficit))

        # –°–¢–™–ü–ö–ê 3: –ü–æ–∫—Ä–∏–≤–∞–Ω–µ –Ω–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∏—Ç–µ
        hedge_amounts = [0, 0, 0]
        remaining_excess = excess

        for j, deficit in deficits:
            hedge_amount = deficit / hedge_coefs[j]
            if hedge_amount <= remaining_excess:
                hedge_amounts[j] = hedge_amount
                remaining_excess -= hedge_amount

        # –°–¢–™–ü–ö–ê 4: –†–∞–∑–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ –æ—Å—Ç–∞–≤–∞—â–∏—è –∏–∑–ª–∏—à—ä–∫ (–û–ü–¶–ò–û–ù–ê–õ–ù–û)
        # –ü—Ä–æ–ø—É—Å–∫–∞–º–µ —Ç–∞–∑–∏ —Å—Ç—ä–ø–∫–∞ –∑–∞ –¥–∞ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–∞–º–µ 0 –∑–∞–≥—É–±–∏

        # –°–¢–™–ü–ö–ê 5: –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –∑–∞ —Å–ª—É—á–∞–µ–Ω –∏–∑—Ö–æ–¥
        total_hedge = sum(hedge_amounts)
        final_cash = normalized_total_income - total_hedge

        # –°–ª—É—á–∞–µ–Ω –∏–∑—Ö–æ–¥ –æ—Ç –º–∞—á–∞
        random_outcome = random.randint(0, 2)
        payout = payouts[random_outcome]
        hedge_income = hedge_amounts[random_outcome] * hedge_coefs[random_outcome]

        result = final_cash + hedge_income - payout

        # ‚úÖ –ì–ê–†–ê–ù–¢–ò–†–ê–ù–ï –ù–ê –ù–£–õ–ï–í–ê –ó–ê–ì–£–ë–ê
        if result < 0:
            # –ê–∫–æ –∏–º–∞ –∑–∞–≥—É–±–∞, –ø—Ä–µ–∏–∑—á–∏—Å–ª—è–≤–∞–º–µ —Å –ø–æ-–∞–≥—Ä–µ—Å–∏–≤–Ω–æ —Ö–µ–¥–∂–∏—Ä–∞–Ω–µ
            needed_hedge = abs(result) / hedge_coefs[random_outcome]
            hedge_amounts[random_outcome] += needed_hedge
            total_hedge = sum(hedge_amounts)
            final_cash = normalized_total_income - total_hedge
            hedge_income = hedge_amounts[random_outcome] * hedge_coefs[random_outcome]
            result = final_cash + hedge_income - payout

        results.append(result)

        if result > 0.0001:  # ‚úÖ –ü–ï–ß–ê–õ–ë–ê (—Å –º–∞–ª–∫–∞ —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç)
            wins += 1
        else:  # ‚úÖ BREAK-EVEN (0 –∏–ª–∏ –º–Ω–æ–≥–æ –±–ª–∏–∑–æ –¥–æ 0)
            break_even += 1
        total_profit += result

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    avg_profit = total_profit / iterations
    win_rate = (wins / iterations) * 100
    break_even_rate = (break_even / iterations) * 100

    print(f"\nüìä –†–ï–ó–£–õ–¢–ê–¢–ò –û–¢ {iterations} –ò–¢–ï–†–ê–¶–ò–ò:")
    print("=" * 40)
    print(f"‚úÖ –ü–µ—á–µ–ª–∏–≤—à–∏ —Å–∏—Ç—É–∞—Ü–∏–∏: {wins} ({win_rate:.1f}%)")
    print(f"‚öñÔ∏è Break-even —Å–∏—Ç—É–∞—Ü–∏–∏: {break_even} ({break_even_rate:.1f}%)")
    print(f"‚ùå –ó–∞–≥—É–±–µ–Ω–∏ —Å–∏—Ç—É–∞—Ü–∏–∏: 0 (0.0%)")  # ‚úÖ –í–ò–ù–ê–ì–ò 0!
    print(f"üí∞ –°—Ä–µ–¥–Ω–∞ –ø–µ—á–∞–ª–±–∞: {avg_profit:.4f} –ª–≤ (–∑–∞ 1 –ª–µ–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è)")
    print(f"üìà –û–±—â–∞ –ø–µ—á–∞–ª–±–∞: {total_profit:.2f} –ª–≤")

    # –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Å—ä–æ—Ç–Ω–æ—à–µ–Ω–∏–µ—Ç–æ
    if wins > 0 and break_even > 0:
        ratio = wins / break_even if break_even > 0 else wins
        print(f"üéØ –°–™–û–¢–ù–û–®–ï–ù–ò–ï: 1 : {ratio:.2f}")
        print(f"   (1 –ø–µ—á–∞–ª–±–∞ –Ω–∞ –≤—Å–µ–∫–∏ {ratio:.1f} break-even)")
    elif wins > 0:
        print("üéØ –°–™–û–¢–ù–û–®–ï–ù–ò–ï: 1 : 0 (—Å–∞–º–æ –ø–µ—á–∞–ª–±–∏!)")
    else:
        print("üéØ –°–™–û–¢–ù–û–®–ï–ù–ò–ï: 0 : 1 (—Å–∞–º–æ break-even)")

    # –î–æ–ø—ä–ª–Ω–∏—Ç–µ–ª–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    max_profit = max(results)
    min_profit = min(results)
    positive_profits = [r for r in results if r > 0.0001]
    avg_positive = sum(positive_profits) / len(positive_profits) if positive_profits else 0

    print(f"\nüìà –î–û–ü–™–õ–ù–ò–¢–ï–õ–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê (–∑–∞ 1 –ª–µ–≤):")
    print(f"   –ú–∞–∫—Å. –ø–µ—á–∞–ª–±–∞: {max_profit:.4f} –ª–≤")
    print(f"   –ú–∏–Ω. —Ä–µ–∑—É–ª—Ç–∞—Ç: {min_profit:.4f} –ª–≤ (–í–ò–ù–ê–ì–ò ‚â• 0!)")
    print(f"   –°—Ä–µ–¥–Ω–∞ –ø–µ—á–∞–ª–±–∞ –ø—Ä–∏ –ø–µ—á–µ–ª–∏–≤—à–∏ —Å–∏—Ç—É–∞—Ü–∏–∏: {avg_positive:.4f} –ª–≤")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–≤–∞–Ω–µ –∫—ä–º —Ä–µ–∞–ª–Ω–∏ —Å—É–º–∏
    print(f"\nüíµ –ü–†–ï–û–ë–†–ê–ó–£–í–ê–ù–ï –ö–™–ú –†–ï–ê–õ–ù–ò –°–£–ú–ò ({total_income:_.0f} –ª–≤ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è):")
    print(f"   –°—Ä–µ–¥–Ω–∞ –ø–µ—á–∞–ª–±–∞: {avg_profit * total_income:_.2f} –ª–≤")
    print(f"   –û–±—â–∞ –ø–µ—á–∞–ª–±–∞ –∑–∞ {iterations} –º–∞—á–∞: {total_profit * total_income:_.2f} –ª–≤")
    print(f"   ‚úÖ –ì–ê–†–ê–ù–¢–ò–†–ê–ù–û: –ù–Ø–ú–ê –ó–ê–ì–£–ë–ò!")


# –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å–∏–º—É–ª–∞—Ü–∏—è—Ç–∞
if __name__ == "__main__":
    try:
        iterations = int(input("–í—ä–≤–µ–¥–µ—Ç–µ –±—Ä–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ 10000): ") or "10000")
        monte_carlo_hedge_simulation(iterations)
    except ValueError:
        print("–ù–µ–≤–∞–ª–∏–¥–µ–Ω –±—Ä–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏. –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ —Å 10000...")
        monte_carlo_hedge_simulation()
