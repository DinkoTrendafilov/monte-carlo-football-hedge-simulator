import random

def monte_carlo_hedge_simulation(iterations=10000):
    """
    –ú–æ–Ω—Ç–µ –ö–∞—Ä–ª–æ —Å–∏–º—É–ª–∞—Ü–∏—è –Ω–∞ —Ñ—É—Ç–±–æ–ª–µ–Ω —Ö–µ–¥–∂ —Å –ê–î–ê–ü–¢–ò–í–ù–ê –°–¢–†–ê–¢–ï–ì–ò–Ø
    """
    print("üé∞ MONTE CARLO –•–ï–î–ñ –°–ò–ú–£–õ–ê–¶–ò–Ø (–ê–î–ê–ü–¢–ò–í–ù–ê –°–¢–†–ê–¢–ï–ì–ò–Ø)")
    print("=" * 80)

    # –í—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏
    coef = [float(x) for x in input("–í—ä–≤–µ–¥–µ—Ç–µ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏ (1 X 2): ").split()]
    bets = [float(x) for x in input("–í—ä–≤–µ–¥–µ—Ç–µ –∑–∞–ª–æ–∑–∏ (1 X 2): ").split()]

    total_income = sum(bets)

    print(f"\nüìä –í–•–û–î–ù–ò –î–ê–ù–ù–ò:")
    print(f"1: {bets[0]:_} –ª–≤ @ {coef[0]:_} ‚Üí –ü–ª–∞—â–∞–Ω–µ: {bets[0] * coef[0]:_.0f} –ª–≤")
    print(f"X: {bets[1]:_} –ª–≤ @ {coef[1]:_} ‚Üí –ü–ª–∞—â–∞–Ω–µ: {bets[1] * coef[1]:_.0f} –ª–≤")
    print(f"2: {bets[2]:_} –ª–≤ @ {coef[2]:_} ‚Üí –ü–ª–∞—â–∞–Ω–µ: {bets[2] * coef[2]:_.0f} –ª–≤")
    print(f"–û–±—â –ø—Ä–∏—Ö–æ–¥: {total_income:_} –ª–≤")
    print("=" * 80)

    wins = 0
    break_even = 0
    losses = 0
    total_profit = 0
    results = []
    strategy_counts = {"–í–ò–°–û–ö –ö–û–ï–§–ò–¶–ò–ï–ù–¢": 0, "–õ–ò–ü–°–ê –ù–ê –ò–ó–Ø–í–ï–ù –§–ê–í–û–†–ò–¢": 0}

    print(f"\nüîÑ –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ {iterations} –∏—Ç–µ—Ä–∞—Ü–∏–∏...")

    for i in range(iterations):
        # –•–µ–¥–∂–∏—Ä–∞—â–∏ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏ (2% –¥–∏—Å–∫–æ–Ω—Ç)
        hedge_coefs = [coef[0] * 0.98, coef[1] * 0.98, coef[2] * 0.98]
        payouts = [bets[i] * coef[i] for i in range(3)]

        # –°–¢–™–ü–ö–ê 1: –ò–ó–ë–û–† –ù–ê –°–¢–†–ê–¢–ï–ì–ò–Ø (–∫–∞—Ç–æ –≤—ä–≤ –≤—Ç–æ—Ä–∏—è –∫–æ–¥)
        max_coef = max(coef)
        min_payout = min(payouts)
        min_payout_index = payouts.index(min_payout)

        if max_coef >= 4:
            # –°–¢–†–ê–¢–ï–ì–ò–Ø 1: –ë–∞–∑–∏—Ä–∞–Ω–∞ –Ω–∞ –Ω–∞–π-–≤–∏—Å–æ–∫ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç
            highest_coef_index = coef.index(max_coef)
            cash = payouts[highest_coef_index]
            strategy_name = "–í–ò–°–û–ö –ö–û–ï–§–ò–¶–ò–ï–ù–¢"
            base_index = highest_coef_index
            strategy_counts["–í–ò–°–û–ö –ö–û–ï–§–ò–¶–ò–ï–ù–¢"] += 1
        else:
            # –°–¢–†–ê–¢–ï–ì–ò–Ø 2: –ë–∞–∑–∏—Ä–∞–Ω–∞ –Ω–∞ –ª–∏–ø—Å–∞ –Ω–∞ –∏–∑—è–≤–µ–Ω —Ñ–∞–≤–æ—Ä–∏—Ç
            cash = min_payout
            strategy_name = "–õ–ò–ü–°–ê –ù–ê –ò–ó–Ø–í–ï–ù –§–ê–í–û–†–ò–¢"
            base_index = min_payout_index
            strategy_counts["–õ–ò–ü–°–ê –ù–ê –ò–ó–Ø–í–ï–ù –§–ê–í–û–†–ò–¢"] += 1

        excess = total_income - cash

        # –°–¢–™–ü–ö–ê 2: –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ –¥–µ—Ñ–∏—Ü–∏—Ç–∏—Ç–µ
        deficits = []
        for j in range(3):
            if j != base_index:
                deficit = payouts[j] - cash
                deficits.append((j, deficit))

        # –°–¢–™–ü–ö–ê 3: –ü–û–ö–†–ò–í–ê–ù–ï –ù–ê –î–ï–§–ò–¶–ò–¢–ò–¢–ï –° –¢–û–ß–ù–ò –°–£–ú–ò
        hedge_amounts = [0, 0, 0]
        remaining_excess = excess

        for j, deficit in deficits:
            hedge_amount = deficit / hedge_coefs[j]
            if hedge_amount <= remaining_excess:
                hedge_amounts[j] = hedge_amount
                remaining_excess -= hedge_amount

        # –°–¢–™–ü–ö–ê 4: –†–∞–∑–ø—Ä–µ–¥–µ–ª—è–Ω–µ –Ω–∞ –æ—Å—Ç–∞–≤–∞—â–∏—è –∏–∑–ª–∏—à—ä–∫
        if remaining_excess > 0:
            other_outcomes = [i for i in range(3) if i != base_index]
            sum_other_coef = hedge_coefs[other_outcomes[0]] + hedge_coefs[other_outcomes[1]]
            base_amount = remaining_excess / sum_other_coef

            for j in other_outcomes:
                other_coef = hedge_coefs[[x for x in other_outcomes if x != j][0]]
                additional_hedge = other_coef * base_amount
                hedge_amounts[j] += additional_hedge

        # –°–¢–™–ü–ö–ê 5: –ò–∑—á–∏—Å–ª—è–≤–∞–Ω–µ –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∞ –∑–∞ —Å–ª—É—á–∞–µ–Ω –∏–∑—Ö–æ–¥
        total_hedge = sum(hedge_amounts)
        final_cash = total_income - total_hedge

        # –°–ª—É—á–∞–µ–Ω –∏–∑—Ö–æ–¥ –æ—Ç –º–∞—á–∞
        random_outcome = random.randint(0, 2)
        payout = payouts[random_outcome]
        hedge_income = hedge_amounts[random_outcome] * hedge_coefs[random_outcome]

        result = final_cash + hedge_income - payout
        results.append(result)

        # –ö–ª–∞—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏—Ç–µ
        if result > 100:  # ‚úÖ –ü–ï–ß–ê–õ–ë–ê (—Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–µ–Ω –ø—Ä–∞–≥)
            wins += 1
        elif result >= -100:  # ‚úÖ BREAK-EVEN (–º–∞–ª–∫–∞ –∑–∞–≥—É–±–∞/–ø–µ—á–∞–ª–±–∞)
            break_even += 1
        else:  # ‚ùå –ó–ê–ì–£–ë–ê
            losses += 1
        
        total_profit += result

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    avg_profit = total_profit / iterations
    win_rate = (wins / iterations) * 100
    break_even_rate = (break_even / iterations) * 100
    loss_rate = (losses / iterations) * 100

    print(f"\nüìä –†–ï–ó–£–õ–¢–ê–¢–ò –û–¢ {iterations} –ò–¢–ï–†–ê–¶–ò–ò:")
    print("=" * 50)
    print(f"‚úÖ –ü–µ—á–µ–ª–∏–≤—à–∏ —Å–∏—Ç—É–∞—Ü–∏–∏: {wins} ({win_rate:.1f}%)")
    print(f"‚öñÔ∏è  Break-even —Å–∏—Ç—É–∞—Ü–∏–∏: {break_even} ({break_even_rate:.1f}%)")
    print(f"‚ùå –ó–∞–≥—É–±–µ–Ω–∏ —Å–∏—Ç—É–∞—Ü–∏–∏: {losses} ({loss_rate:.1f}%)")
    print(f"üí∞ –°—Ä–µ–¥–Ω–∞ –ø–µ—á–∞–ª–±–∞: {avg_profit:_.0f} –ª–≤")
    print(f"üìà –û–±—â–∞ –ø–µ—á–∞–ª–±–∞: {total_profit:_.0f} –ª–≤")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏—Ç–µ
    print(f"\nüéØ –°–¢–†–ê–¢–ï–ì–ò–ò:")
    for strategy, count in strategy_counts.items():
        percentage = (count / iterations) * 100
        print(f"   {strategy}: {count} –ø—ä—Ç–∏ ({percentage:.1f}%)")

    # –î–µ—Ç–∞–π–ª–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    max_profit = max(results)
    min_profit = min(results)
    positive_profits = [r for r in results if r > 100]
    avg_positive = sum(positive_profits) / len(positive_profits) if positive_profits else 0

    print(f"\nüìà –î–ï–¢–ê–ô–õ–ù–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –ú–∞–∫—Å. –ø–µ—á–∞–ª–±–∞: {max_profit:_.0f} –ª–≤")
    print(f"   –ú–∏–Ω. —Ä–µ–∑—É–ª—Ç–∞—Ç: {min_profit:_.0f} –ª–≤")
    print(f"   –°—Ä–µ–¥–Ω–∞ –ø–µ—á–∞–ª–±–∞ –ø—Ä–∏ –ø–µ—á–µ–ª–∏–≤—à–∏ —Å–∏—Ç—É–∞—Ü–∏–∏: {avg_positive:_.0f} –ª–≤")
    
    # –ê–Ω–∞–ª–∏–∑ –Ω–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—Ç–∞
    if wins + break_even > 0:
        success_rate = ((wins + break_even) / iterations) * 100
        print(f"   üìä –£—Å–ø–µ—à–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø–µ—á–∞–ª–±–∞/break-even): {success_rate:.1f}%")

    # –ü—Ä–µ–ø–æ—Ä—ä–∫–∏
    print(f"\nüí° –ü–†–ï–ü–û–†–™–ö–ò:")
    if win_rate > 70:
        print("   üéâ –û—Ç–ª–∏—á–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è! –í–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–∞ –ø–µ—á–∞–ª–±–∏.")
    elif win_rate > 50:
        print("   üëç –î–æ–±—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è. –°—Ç–∞–±–∏–ª–Ω–∏ —Ä–µ–∑—É–ª—Ç–∞—Ç–∏.")
    else:
        print("   ‚ö†Ô∏è  –°—Ç—Ä–∞—Ç–µ–≥–∏—è—Ç–∞ –∏–º–∞ –≤–∏—Å–æ–∫ —Ä–∏—Å–∫. –ü—Ä–µ–ø–æ—Ä—ä—á–∏—Ç–µ–ª–Ω–æ –µ —Ç–µ—Å—Ç–≤–∞–Ω–µ —Å —Ä–∞–∑–ª–∏—á–Ω–∏ –∫–æ–µ—Ñ–∏—Ü–∏–µ–Ω—Ç–∏.")
    
    if loss_rate < 5:
        print("   üõ°Ô∏è  –ù–∏—Å–∫ —Ä–∏—Å–∫ - —Ä—è–¥–∫–æ –∑–∞–≥—É–±–∏.")
    elif loss_rate < 15:
        print("   ‚öñÔ∏è  –£–º–µ—Ä–µ–Ω —Ä–∏—Å–∫ - –ø—Ä–∏–µ–º–ª–∏–≤ –±—Ä–æ–π –∑–∞–≥—É–±–∏.")
    else:
        print("   üö® –í–∏—Å–æ–∫ —Ä–∏—Å–∫ - —á–µ—Å—Ç–∏ –∑–∞–≥—É–±–∏.")

# –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ —Å–∏–º—É–ª–∞—Ü–∏—è—Ç–∞
if __name__ == "__main__":
    try:
        iterations = int(input("–í—ä–≤–µ–¥–µ—Ç–µ –±—Ä–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ (–ø–æ –ø–æ–¥—Ä–∞–∑–±–∏—Ä–∞–Ω–µ 10000): ") or "10000")
        monte_carlo_hedge_simulation(iterations)
    except ValueError:
        print("–ù–µ–≤–∞–ª–∏–¥–µ–Ω –±—Ä–æ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏. –°—Ç–∞—Ä—Ç–∏—Ä–∞–Ω–µ —Å 10000...")
        monte_carlo_hedge_simulation()
